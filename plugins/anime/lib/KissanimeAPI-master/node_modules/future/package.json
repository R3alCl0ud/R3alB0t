{
  "_args": [
    [
      {
        "name": "future",
        "raw": "future@2.x",
        "rawSpec": "2.x",
        "scope": null,
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "D:\\development\\node_modules\\futures"
    ]
  ],
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "future@>=2.0.0 <3.0.0",
  "_id": "future@2.3.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/future",
  "_nodeVersion": "v0.6.18",
  "_npmUser": {
    "email": "coolaj86@gmail.com",
    "name": "coolaj86"
  },
  "_npmVersion": "1.1.21",
  "_phantomChildren": {},
  "_requested": {
    "name": "future",
    "raw": "future@2.x",
    "rawSpec": "2.x",
    "scope": null,
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/asyncify",
    "/chainify",
    "/futures",
    "/join",
    "/loop"
  ],
  "_resolved": "https://registry.npmjs.org/future/-/future-2.3.1.tgz",
  "_shasum": "2d327e0611dd56fac7112d057c799c485ec23be9",
  "_shrinkwrap": null,
  "_spec": "future@2.x",
  "_where": "D:\\development\\node_modules\\futures",
  "author": {
    "email": "coolaj86@gmail.com",
    "name": "AJ ONeal",
    "url": "http://coolaj86.info"
  },
  "bugs": {
    "url": "https://github.com/coolaj86/futures/issues"
  },
  "dependencies": {},
  "description": "The promise / subscribe / deferred module of FuturesJS (Ender.JS and Node.JS)",
  "devDependencies": {},
  "directories": {
    "lib": "."
  },
  "dist": {
    "shasum": "2d327e0611dd56fac7112d057c799c485ec23be9",
    "tarball": "https://registry.npmjs.org/future/-/future-2.3.1.tgz"
  },
  "engines": {
    "ender": ">= 0.5.0",
    "node": "*"
  },
  "homepage": "https://github.com/coolaj86/futures",
  "keywords": [
    "flow-control",
    "async",
    "asynchronous",
    "futures",
    "promises",
    "deferreds",
    "util",
    "browser"
  ],
  "main": "future.js",
  "maintainers": [
    {
      "email": "coolaj86@gmail.com",
      "name": "coolaj86"
    }
  ],
  "name": "future",
  "optionalDependencies": {},
  "readme": "Future\n----\n\nCreates a Future (aka Promise, Deferred, Subscription, Callback) object.\n\nInstallation\n---\n\nNode.JS (Server):\n\n    npm install future\n\nEnder.JS (Browser):\n\n    ender build future\n\nUsage\n---\n\n    var context = { \"foo\": \"bar\" }\n      , Future = require('future')\n      , future = Future.create(context)\n      , err\n      , message = \"Hello World!\"\n      ;\n\n    future.whenever(function (error, data) {\n      if (error) {\n        throw err;\n      }\n      console.log(this.foo + \" says: \" + data);\n    });\n\n    future.setTimeout(100);\n    future.deliver(err, message);\n\nOutput:\n\n    \"bar says: Hello World\"\n    FutureTimeout: timeout 100ms\n        at [object SomeObject]:x:y\n        ...\n\nAPI\n---\n\nCreates a Future (aka Promise, Deferred, Subscription, Callback) object.\n\n**Core**\n\n  * `Futures.future(globalContext=null)` - creates a `Future` object and uses `globalContext` as the default `this` for callbacks\n\n  * `deliver(err, data, ...)` - Send a message (data) to all listeners (callbacks)\n\n  * `fulfill([err, data, ...])` - Prevent the sending of any future messages. If arguments are passed they will be `deliver`ed.\n\n  * `whenever(callback, [context])` - Listen to all messages, applying `context` if provided (passing `null` cancels `globalContext`)\n\n  * `when(callback, [context])` - Listen one-time only, then `removeCallback` automatically\n\n  * `setTimeout(ms)` - will sends a `FutureTimeout` error if no activity occurs within `ms`\n\n\n**Accessory**\n\n  * `errback(err)` - Useful for a peer-library requiring a method specifically for errbacks\n    * i.e. `jQuery`'s `$.ajax`\n\n  * `callback(data [, ...])` - Useful for a peer-library requiring a method which does not pass `err` as the first parameter\n    * i.e. `jQuery`'s `$.ajax`\n\n  * `removeCallback(callback, context=null)` - This callback and associated context will no longer receive messages\n\n  * `setAsap(on=true)` - New listeners get existing data (if available) rather than waiting until the next delivery (default on)\n\n  * `isFuture(obj)` - a best-effort guess as to whether or not an object is a Future\n\n  * `callbackCount(callback, context)` - The number of listening callbacks\n\n  * `deliveryCount(callback, context)` - The number of deliveries made\n\n  * `hasCallback(callback, context=null)` - Returns `true` if the callback is listening\n\n\nExample\n---\n\n    var context = { \"foo\": \"bar\" },\n      future = Futures.future(context),\n      err,\n      message = \"Hello World!\";\n\n    future.whenever(function (error, data) {\n      if (error) {\n        throw err;\n      }\n      console.log(this.foo + \" says: \" + data);\n    });\n\n    future.setTimeout(100);\n    future.deliver(err, message);\n\nOutput:\n\n    \"bar says: Hello World\"\n    FutureTimeout: timeout 100ms\n        at [object SomeObject]:x:y\n        ...\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/coolaj86/futures.git"
  },
  "version": "2.3.1"
}
